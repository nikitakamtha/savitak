import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
df=pd.read_csv("C:/Users/asus/Downloads/archive (11)/boston_housing.csv")
df
(x_train,y_train),(x_val,y_val)=keras.datasets.boston_housing.load_data()
def create_model(hidden_layers, neurons_per_layer):
    model = keras.Sequential()
    model.add(layers.Dense(neurons_per_layer, activation='relu', input_shape=(x_train.shape[1],)))
    for i in range(hidden_layers):
        model.add(layers.Dense(neurons_per_layer, activation='relu'))
    model.add(layers.Dense(1))
    model.compile(optimizer='adam', loss='mean_squared_error', metrics=['mae'])
    return model
hidden_layers = [1, 2, 3]
neurons_per_layer = [32, 64, 128]
for hidden in hidden_layers:
    for neurons in neurons_per_layer:
        model = create_model(hidden, neurons)
        history = model.fit(x_train, y_train, epochs=5, validation_data=(x_val, y_val))
def plot_history(history):
    plt.figure(figsize=(12,4))
    plt.subplot(1, 2, 1)
    plt.xlabel('Epoch')
    plt.ylabel('Mean Abs Error [1000$]')
    plt.plot(history.epoch, np.array(history.history['mae']), label='Train Loss')
    plt.plot(history.epoch, np.array(history.history['val_mae']), label = 'Val loss')
    plt.legend()
    plt.subplot(1, 2, 2)
    plt.ylabel('Mean Abs Error [1000$]')
    plt.plot(history.epoch, np.array(history.history['loss']), label='Train Loss')
    plt.plot(history.epoch, np.array(history.history['val_loss']), label = 'Val loss')
    plt.legend()
    plt.show()
plot_history(history)
test_predictions=model.predict(x_train)
mse,mae=model.evaluate(x_train,y_train)
print("mean squared error",mse)
print("mean absolute error",mae)
print("Real values=",y_test)
